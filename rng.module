<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function rng_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'rng.registration_type.overview':
      $output = '<p>' . t('Each registration type is a form that is filled to create a registration. Events can choose which registration type to use for its registrations.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_access().
 */
function rng_entity_access(EntityInterface $entity, $operation, AccountInterface $account, $langcode) {
  if ($operation == 'manage event') {
    $event_config = \Drupal::service('rng.event_manager')
      ->eventType($entity->getEntityTypeId(), $entity->bundle());
    // Check if we are mirroring another operation, and prevent recursion
    if ($event_config && !empty($event_config->mirror_update_permission) && $event_config->mirror_update_permission != 'manage event') {
      if ($entity->access($event_config->mirror_update_permission, $account)) {
        return AccessResult::allowed();
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_alter().
 */
function rng_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_admin_permissions') {
    // Disable registrations for anonymous users.
    foreach ($form['permissions'] as $permission_id => &$permission) {
      if (strstr($permission_id, 'rng register')) {
        $permission['anonymous']['#disabled'] = TRUE;
      }
    }
  }
}