<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\rng\Entity\RuleSchedule;

/**
 * Implements hook_help().
 */
function rng_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'rng.registration_type.overview':
      $output = '<p>' . t('Each registration type is a form that is filled to create a registration. Events can choose which registration type to use for its registrations.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_access().
 */
function rng_entity_access(EntityInterface $entity, $operation, AccountInterface $account, $langcode) {
  if ($operation == 'manage event') {
    /** @var \Drupal\rng\EventTypeInterface $event_type */
    $event_type = \Drupal::service('rng.event_manager')
      ->eventType($entity->getEntityTypeId(), $entity->bundle());
    if ($event_type && $event_type->getEventManageOperation()) {
      // Prevents recursion:
      if ($event_type->getEventManageOperation() != 'manage event') {
        if ($entity->access($event_type->getEventManageOperation(), $account)) {
          return AccessResult::allowed();
        }
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_alter().
 */
function rng_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_admin_permissions') {
    // Disable registrations for anonymous users.
    foreach ($form['permissions'] as $permission_id => &$permission) {
      if (strstr($permission_id, 'rng register')) {
        $permission['anonymous']['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function rng_cron() {
  // Add scheduled rules to be executed.
  $queue = \Drupal::queue('rng_rule_scheduler');
  $rule_scheduler_storage = \Drupal::entityManager()->getStorage('rng_rule_scheduler');
  $ids = $rule_scheduler_storage->getQuery()
    ->condition('trigger_date', time(), '<=')
    ->condition('in_queue', 0, '=')
    ->condition('attempts', RuleSchedule::ATTEMPTS_MAX, '<=')
    ->execute();

  foreach ($rule_scheduler_storage->loadMultiple($ids) as $rule_schedule) {
    $data = ['rule_component_id' => $rule_schedule->id()];
    if ($queue->createItem($data)) {
      $rule_schedule->setInQueue(TRUE);
      $rule_schedule->save();
    }
  }

  // Delete scheduled rules which have had too many attempts.
  $ids = $rule_scheduler_storage->getQuery()
    ->condition('attempts', RuleSchedule::ATTEMPTS_MAX, '>')
    ->execute();
  $rule_scheduler_storage->delete($rule_scheduler_storage->loadMultiple($ids));
}
